{"ast":null,"code":"import _slicedToArray from\"C:/Users/alex/Desktop/cod/excel-table-tool/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import DragDropFile from\"./DragDropFile\";import DataInput from\"./DataInput\";import OutTable from\"./OutTable\";import XLSX from\"xlsx\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SheetJSApp=function SheetJSApp(){var _useState=useState({data:[],cols:[]}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];console.log(state);/* generate an array of column objects */var make_cols=function make_cols(refstr){var o=[],C=XLSX.utils.decode_range(refstr).e.c+1;for(var i=0;i<C;++i){o[i]={name:XLSX.utils.encode_col(i),key:i};}return o;};var handleFile=function handleFile(file/*:File*/){/* Boilerplate to set up FileReader */var reader=new FileReader();var rABS=!!reader.readAsBinaryString;reader.onload=function(e){/* Parse data */var bstr=e.target.result;var wb=XLSX.read(bstr,{type:rABS?\"binary\":\"array\"// cellDates: true,\n});/* Get first worksheet */var wsname=wb.SheetNames[0];var ws=wb.Sheets[wsname];/* Convert array of arrays */var data=XLSX.utils.sheet_to_json(ws,{header:1,raw:false});console.log(wb);/* Update state */setState({data:data,cols:make_cols(ws[\"!ref\"])});};if(rABS)reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);};return/*#__PURE__*/_jsxs(DragDropFile,{handleFile:handleFile,children:[state.data<=0?/*#__PURE__*/_jsx(\"div\",{className:\"row1\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-xs-12\",children:/*#__PURE__*/_jsx(DataInput,{handleFile:handleFile})})}):\"\",/*#__PURE__*/_jsx(\"div\",{className:\"row2\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-xs-12\",children:/*#__PURE__*/_jsx(OutTable,{data:state.data,cols:state.cols})})})]});};export default SheetJSApp;","map":{"version":3,"sources":["C:/Users/alex/Desktop/cod/excel-table-tool/src/SheetJSApp.js"],"names":["React","useState","DragDropFile","DataInput","OutTable","XLSX","SheetJSApp","data","cols","state","setState","console","log","make_cols","refstr","o","C","utils","decode_range","e","c","i","name","encode_col","key","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","sheet_to_json","header","raw","readAsArrayBuffer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport DragDropFile from \"./DragDropFile\";\nimport DataInput from \"./DataInput\";\nimport OutTable from \"./OutTable\";\nimport XLSX from \"xlsx\";\n\nconst SheetJSApp = () => {\n\tconst [state, setState] = useState({ data: [], cols: [] });\n\n\tconsole.log(state);\n\n\t/* generate an array of column objects */\n\tconst make_cols = (refstr) => {\n\t\tlet o = [],\n\t\t\tC = XLSX.utils.decode_range(refstr).e.c + 1;\n\t\tfor (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n\t\treturn o;\n\t};\n\n\tconst handleFile = (file /*:File*/) => {\n\t\t/* Boilerplate to set up FileReader */\n\t\tconst reader = new FileReader();\n\t\tconst rABS = !!reader.readAsBinaryString;\n\t\treader.onload = (e) => {\n\t\t\t/* Parse data */\n\t\t\tconst bstr = e.target.result;\n\t\t\tconst wb = XLSX.read(bstr, {\n\t\t\t\ttype: rABS ? \"binary\" : \"array\",\n\t\t\t\t// cellDates: true,\n\t\t\t});\n\t\t\t/* Get first worksheet */\n\t\t\tconst wsname = wb.SheetNames[0];\n\t\t\tconst ws = wb.Sheets[wsname];\n\t\t\t/* Convert array of arrays */\n\t\t\tconst data = XLSX.utils.sheet_to_json(ws, { header: 1, raw: false });\n\t\t\tconsole.log(wb);\n\t\t\t/* Update state */\n\t\t\tsetState({ data: data, cols: make_cols(ws[\"!ref\"]) });\n\t\t};\n\t\tif (rABS) reader.readAsBinaryString(file);\n\t\telse reader.readAsArrayBuffer(file);\n\t};\n\n\treturn (\n\t\t<DragDropFile handleFile={handleFile}>\n      {state.data <= 0 ? <div className=\"row1\">\n\t\t\t\t<div className=\"col-xs-12\">\n\t\t\t\t\t<DataInput handleFile={handleFile} />\n\t\t\t\t</div>\n\t\t\t</div> : \"\"}\n\t\t\t<div className=\"row2\">\n\t\t\t\t<div className=\"col-xs-12\">\n\t\t\t\t\t<OutTable data={state.data} cols={state.cols} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</DragDropFile>\n\t);\n};\n\nexport default SheetJSApp;\n"]},"metadata":{},"sourceType":"module"}