{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alex\\\\Desktop\\\\cod\\\\excel-table-tool\\\\src\\\\SheetJSApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport DragDropFile from \"./DragDropFile\";\nimport DataInput from \"./DataInput\";\nimport OutTable from \"./OutTable\";\nimport XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SheetJSApp = () => {\n  _s();\n\n  const [state, setState] = useState({\n    data: [],\n    cols: []\n  });\n  console.log(state);\n  /* generate an array of column objects */\n\n  const make_cols = refstr => {\n    let o = [],\n        C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n    for (var i = 0; i < C; ++i) o[i] = {\n      name: XLSX.utils.encode_col(i),\n      key: i\n    };\n\n    return o;\n  };\n\n  const handleFile = (file\n  /*:File*/\n  ) => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\" // cellDates: true,\n\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1,\n        raw: false\n      });\n      console.log(wb);\n      /* Update state */\n\n      setState({\n        data: data,\n        cols: make_cols(ws[\"!ref\"])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropFile, {\n    handleFile: handleFile,\n    children: [state.data && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(DataInput, {\n          handleFile: handleFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(OutTable, {\n          data: state.data,\n          cols: state.cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SheetJSApp, \"TEjiDcIc86kc7WHIGC/QbadJibo=\");\n\n_c = SheetJSApp;\nexport default SheetJSApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SheetJSApp\");","map":{"version":3,"sources":["C:/Users/alex/Desktop/cod/excel-table-tool/src/SheetJSApp.js"],"names":["React","useState","DragDropFile","DataInput","OutTable","XLSX","SheetJSApp","state","setState","data","cols","console","log","make_cols","refstr","o","C","utils","decode_range","e","c","i","name","encode_col","key","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","sheet_to_json","header","raw","readAsArrayBuffer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport DragDropFile from \"./DragDropFile\";\nimport DataInput from \"./DataInput\";\nimport OutTable from \"./OutTable\";\nimport XLSX from \"xlsx\";\n\nconst SheetJSApp = () => {\n\tconst [state, setState] = useState({ data: [], cols: [] });\n\n\tconsole.log(state);\n\n\t/* generate an array of column objects */\n\tconst make_cols = (refstr) => {\n\t\tlet o = [],\n\t\t\tC = XLSX.utils.decode_range(refstr).e.c + 1;\n\t\tfor (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n\t\treturn o;\n\t};\n\n\tconst handleFile = (file /*:File*/) => {\n\t\t/* Boilerplate to set up FileReader */\n\t\tconst reader = new FileReader();\n\t\tconst rABS = !!reader.readAsBinaryString;\n\t\treader.onload = (e) => {\n\t\t\t/* Parse data */\n\t\t\tconst bstr = e.target.result;\n\t\t\tconst wb = XLSX.read(bstr, {\n\t\t\t\ttype: rABS ? \"binary\" : \"array\",\n\t\t\t\t// cellDates: true,\n\t\t\t});\n\t\t\t/* Get first worksheet */\n\t\t\tconst wsname = wb.SheetNames[0];\n\t\t\tconst ws = wb.Sheets[wsname];\n\t\t\t/* Convert array of arrays */\n\t\t\tconst data = XLSX.utils.sheet_to_json(ws, { header: 1, raw: false });\n\t\t\tconsole.log(wb);\n\t\t\t/* Update state */\n\t\t\tsetState({ data: data, cols: make_cols(ws[\"!ref\"]) });\n\t\t};\n\t\tif (rABS) reader.readAsBinaryString(file);\n\t\telse reader.readAsArrayBuffer(file);\n\t};\n\n\treturn (\n\t\t<DragDropFile handleFile={handleFile}>\n      {state.data && <div className=\"row\">\n\t\t\t\t<div className=\"col-xs-12\">\n\t\t\t\t\t<DataInput handleFile={handleFile} />\n\t\t\t\t</div>\n\t\t\t</div>}\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-xs-12\">\n\t\t\t\t\t<OutTable data={state.data} cols={state.cols} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</DragDropFile>\n\t);\n};\n\nexport default SheetJSApp;\n"]},"metadata":{},"sourceType":"module"}