{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alex\\\\Desktop\\\\cod\\\\excel-table-tool\\\\src\\\\SheetJSApp.js\",\n    _s = $RefreshSig$();\n\n/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React, { useState } from \"react\";\nimport DragDropFile from \"./DragDropFile\";\nimport DataInput from \"./DataInput;\";\nimport OutTable from \"./OutTable\";\nimport XLSX from \"xlsx\";\n/* generate an array of column objects */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nconst SheetJSApp = () => {\n  _s();\n\n  const [state, setState] = useState([]);\n\n  const handleFile = (file\n  /*:File*/\n  ) => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      setState({\n        data: data,\n        cols: make_cols(ws[\"!ref\"])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  };\n\n  const exportFile = () => {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropFile, {\n    handleFile: handleFile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(DataInput, {\n          handleFile: handleFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !state.data.length,\n          className: \"btn btn-success\",\n          onClick: exportFile,\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(OutTable, {\n          data: state.data,\n          cols: state.cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SheetJSApp, \"yua82o5JV2p+bdzgVd8naWBubMo=\");\n\n_c = SheetJSApp;\nexport default DragDropFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"SheetJSApp\");","map":{"version":3,"sources":["C:/Users/alex/Desktop/cod/excel-table-tool/src/SheetJSApp.js"],"names":["React","useState","DragDropFile","DataInput","OutTable","XLSX","make_cols","refstr","o","C","utils","decode_range","e","c","i","name","encode_col","key","SheetJSApp","state","setState","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","console","log","data","sheet_to_json","header","cols","readAsArrayBuffer","exportFile","aoa_to_sheet","book_new","book_append_sheet","writeFile","length"],"mappings":"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","sourcesContent":["/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React, { useState } from \"react\";\nimport DragDropFile from \"./DragDropFile\";\nimport DataInput from \"./DataInput;\";\nimport OutTable from \"./OutTable\";\nimport XLSX from \"xlsx\";\n\n/* generate an array of column objects */\nconst make_cols = (refstr) => {\n  let o = [],\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\n  for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n  return o;\n};\n\nconst SheetJSApp = () => {\n  const [state, setState] = useState([]);\n\n  const handleFile = (file /*:File*/) => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      setState({ data: data, cols: make_cols(ws[\"!ref\"]) });\n    };\n    if (rABS) reader.readAsBinaryString(file);\n    else reader.readAsArrayBuffer(file);\n  };\n\n  const exportFile = () => {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  };\n  return (\n    <DragDropFile handleFile={handleFile}>\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <DataInput handleFile={handleFile} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <button\n            disabled={!state.data.length}\n            className=\"btn btn-success\"\n            onClick={exportFile}\n          >\n            Export\n          </button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <OutTable data={state.data} cols={state.cols} />\n        </div>\n      </div>\n    </DragDropFile>\n  );\n};\n\nexport default DragDropFile;\n"]},"metadata":{},"sourceType":"module"}