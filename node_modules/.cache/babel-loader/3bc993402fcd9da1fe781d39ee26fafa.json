{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alex\\\\Desktop\\\\cod\\\\excel-table-tool\\\\src\\\\App.js\";\n\n/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React, { useState } from \"react\";\nimport XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SheetJSApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n      /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */\n      ,\n      cols: []\n      /* Array of column objects e.g. { name: \"C\", K: 2 } */\n\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.exportFile = this.exportFile.bind(this);\n  }\n\n  handleFile(file\n  /*:File*/\n  ) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      this.setState({\n        data: data,\n        cols: make_cols(ws[\"!ref\"])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  }\n\n  exportFile() {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropFile, {\n      handleFile: this.handleFile,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(DataInput, {\n            handleFile: this.handleFile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !this.state.data.length,\n            className: \"btn btn-success\",\n            onClick: this.exportFile,\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(OutTable, {\n            data: this.state.data,\n            cols: this.state.cols\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\n\nconst DragDropFile = props => {\n  const suppress = evt => {\n    evt.stopPropagation();\n    evt.preventDefault();\n  };\n\n  const onDrop = evt => {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDrop: onDrop,\n    onDragEnter: suppress,\n    onDragOver: suppress,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\n\n_c = DragDropFile;\n\nconst DataInput = props => {\n  const handleChange = e => {\n    const files = e.target.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-inline\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: \"Spreadsheet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"form-control\",\n        id: \"file\",\n        accept: SheetJSFT,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\n\n_c2 = DataInput;\n\nconst OutTable = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-responsive\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: props.cols.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: c.name\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: props.data.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: props.cols.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: r[c.key]\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n/* list of supported file types */\n\n\n_c3 = OutTable;\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"].map(function (x) {\n  return \".\" + x;\n}).join(\",\");\n/* generate an array of column objects */\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DragDropFile\");\n$RefreshReg$(_c2, \"DataInput\");\n$RefreshReg$(_c3, \"OutTable\");","map":{"version":3,"sources":["C:/Users/alex/Desktop/cod/excel-table-tool/src/App.js"],"names":["React","useState","XLSX","SheetJSApp","Component","constructor","props","state","data","cols","handleFile","bind","exportFile","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","console","log","utils","sheet_to_json","header","setState","make_cols","readAsArrayBuffer","aoa_to_sheet","book_new","book_append_sheet","writeFile","render","length","DragDropFile","suppress","evt","stopPropagation","preventDefault","onDrop","files","dataTransfer","children","DataInput","handleChange","SheetJSFT","OutTable","map","c","name","key","r","i","x","join","refstr","o","C","decode_range","encode_col"],"mappings":"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","sourcesContent":["/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React, { useState } from \"react\";\nimport XLSX from \"xlsx\";\n\nexport default class SheetJSApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [] /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */,\n      cols: [] /* Array of column objects e.g. { name: \"C\", K: 2 } */,\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.exportFile = this.exportFile.bind(this);\n  }\n  handleFile(file /*:File*/) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      this.setState({ data: data, cols: make_cols(ws[\"!ref\"]) });\n    };\n    if (rABS) reader.readAsBinaryString(file);\n    else reader.readAsArrayBuffer(file);\n  }\n  exportFile() {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  }\n  render() {\n    return (\n      <DragDropFile handleFile={this.handleFile}>\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <DataInput handleFile={this.handleFile} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <button\n              disabled={!this.state.data.length}\n              className=\"btn btn-success\"\n              onClick={this.exportFile}\n            >\n              Export\n            </button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <OutTable data={this.state.data} cols={this.state.cols} />\n          </div>\n        </div>\n      </DragDropFile>\n    );\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\nconst DragDropFile = (props) => {\n  const suppress = (evt) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n  };\n  const onDrop = (evt) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n  return (\n    <div onDrop={onDrop} onDragEnter={suppress} onDragOver={suppress}>\n      {props.children}\n    </div>\n  );\n};\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nconst DataInput = (props) => {\n  const handleChange = (e) => {\n    const files = e.target.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n  return (\n    <form className=\"form-inline\">\n      <div className=\"form-group\">\n        <label htmlFor=\"file\">Spreadsheet</label>\n        <input\n          type=\"file\"\n          className=\"form-control\"\n          id=\"file\"\n          accept={SheetJSFT}\n          onChange={handleChange}\n        />\n      </div>\n    </form>\n  );\n};\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nconst OutTable = (props) => {\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            {props.cols.map((c) => (\n              <th key={c.key}>{c.name}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {props.data.map((r, i) => (\n            <tr key={i}>\n              {props.cols.map((c) => (\n                <td key={c.key}>{r[c.key]}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n/* list of supported file types */\nconst SheetJSFT = [\n  \"xlsx\",\n  \"xlsb\",\n  \"xlsm\",\n  \"xls\",\n  \"xml\",\n  \"csv\",\n  \"txt\",\n  \"ods\",\n  \"fods\",\n  \"uos\",\n  \"sylk\",\n  \"dif\",\n  \"dbf\",\n  \"prn\",\n  \"qpw\",\n  \"123\",\n  \"wb*\",\n  \"wq*\",\n  \"html\",\n  \"htm\",\n]\n  .map(function (x) {\n    return \".\" + x;\n  })\n  .join(\",\");\n\n/* generate an array of column objects */\nconst make_cols = (refstr) => {\n  let o = [],\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\n  for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n  return o;\n};\n"]},"metadata":{},"sourceType":"module"}