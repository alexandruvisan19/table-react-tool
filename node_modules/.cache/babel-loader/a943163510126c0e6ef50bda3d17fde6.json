{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alex\\\\Desktop\\\\cod\\\\excel-table-tool\\\\src\\\\SheetJSApp.js\";\n\n/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React from \"react\";\nimport XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SheetJSApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n      /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */\n      ,\n      cols: []\n      /* Array of column objects e.g. { name: \"C\", K: 2 } */\n\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.exportFile = this.exportFile.bind(this);\n    console.log(!this.state.data.length);\n  }\n\n  handleFile(file\n  /*:File*/\n  ) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      this.setState({\n        data: data,\n        cols: make_cols(ws[\"!ref\"])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  }\n\n  exportFile() {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropFile, {\n      handleFile: this.handleFile,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(DataInput, {\n            handleFile: this.handleFile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !this.state.data.length,\n            className: \"btn btn-success\",\n            onClick: this.exportFile,\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(OutTable, {\n            data: this.state.data,\n            cols: this.state.cols\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\n\nclass DragDropFile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  suppress(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n\n  onDrop(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onDrop: this.onDrop,\n      onDragEnter: this.suppress,\n      onDragOver: this.suppress,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\n\nclass DataInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-inline\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file\",\n          children: \"Spreadsheet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control\",\n          id: \"file\",\n          accept: SheetJSFT,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\n\nclass OutTable extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-responsive\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: this.props.cols.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: c.name\n            }, c.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.props.data.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: this.props.cols.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: r[c.key]\n            }, c.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, this))\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/* list of supported file types */\n\n\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"].map(function (x) {\n  return \".\" + x;\n}).join(\",\");\n/* generate an array of column objects */\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};","map":{"version":3,"sources":["C:/Users/alex/Desktop/cod/excel-table-tool/src/SheetJSApp.js"],"names":["React","XLSX","SheetJSApp","Component","constructor","props","state","data","cols","handleFile","bind","exportFile","console","log","length","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","setState","make_cols","readAsArrayBuffer","aoa_to_sheet","book_new","book_append_sheet","writeFile","render","DragDropFile","onDrop","suppress","evt","stopPropagation","preventDefault","files","dataTransfer","children","DataInput","handleChange","SheetJSFT","OutTable","map","c","name","key","r","i","x","join","refstr","o","C","decode_range","encode_col"],"mappings":"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","sourcesContent":["/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React from \"react\";\nimport XLSX from \"xlsx\";\n\nexport default class SheetJSApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [] /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */,\n      cols: [] /* Array of column objects e.g. { name: \"C\", K: 2 } */,\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.exportFile = this.exportFile.bind(this);\n    console.log(!this.state.data.length);\n  }\n  handleFile(file /*:File*/) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      this.setState({ data: data, cols: make_cols(ws[\"!ref\"]) });\n    };\n    if (rABS) reader.readAsBinaryString(file);\n    else reader.readAsArrayBuffer(file);\n  }\n  exportFile() {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  }\n  render() {\n    return (\n      <DragDropFile handleFile={this.handleFile}>\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <DataInput handleFile={this.handleFile} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <button\n              disabled={!this.state.data.length}\n              className=\"btn btn-success\"\n              onClick={this.exportFile}\n            >\n              Export\n            </button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <OutTable data={this.state.data} cols={this.state.cols} />\n          </div>\n        </div>\n      </DragDropFile>\n    );\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\nclass DragDropFile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onDrop = this.onDrop.bind(this);\n  }\n  suppress(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n  onDrop(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n  render() {\n    return (\n      <div\n        onDrop={this.onDrop}\n        onDragEnter={this.suppress}\n        onDragOver={this.suppress}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nclass DataInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n  render() {\n    return (\n      <form className=\"form-inline\">\n        <div className=\"form-group\">\n          <label htmlFor=\"file\">Spreadsheet</label>\n          <input\n            type=\"file\"\n            className=\"form-control\"\n            id=\"file\"\n            accept={SheetJSFT}\n            onChange={this.handleChange}\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nclass OutTable extends React.Component {\n  render() {\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              {this.props.cols.map((c) => (\n                <th key={c.key}>{c.name}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.data.map((r, i) => (\n              <tr key={i}>\n                {this.props.cols.map((c) => (\n                  <td key={c.key}>{r[c.key]}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n/* list of supported file types */\nconst SheetJSFT = [\n  \"xlsx\",\n  \"xlsb\",\n  \"xlsm\",\n  \"xls\",\n  \"xml\",\n  \"csv\",\n  \"txt\",\n  \"ods\",\n  \"fods\",\n  \"uos\",\n  \"sylk\",\n  \"dif\",\n  \"dbf\",\n  \"prn\",\n  \"qpw\",\n  \"123\",\n  \"wb*\",\n  \"wq*\",\n  \"html\",\n  \"htm\",\n]\n  .map(function (x) {\n    return \".\" + x;\n  })\n  .join(\",\");\n\n/* generate an array of column objects */\nconst make_cols = (refstr) => {\n  let o = [],\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\n  for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n  return o;\n};\n"]},"metadata":{},"sourceType":"module"}