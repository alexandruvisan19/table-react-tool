{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alex\\\\Desktop\\\\cod\\\\excel-table-tool\\\\src\\\\SheetJSApp.js\",\n    _s = $RefreshSig$();\n\n/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React, { useState } from \"react\";\nimport DragDropFile from \"./DragDropFile\";\nimport XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SheetJSApp = () => {\n  _s();\n\n  const [state, setState] = useState([]);\n\n  const handleFile = (file\n  /*:File*/\n  ) => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      setState({\n        data: data,\n        cols: make_cols(ws[\"!ref\"])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  };\n\n  const exportFile = () => {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropFile, {\n    handleFile: handleFile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(DataInput, {\n          handleFile: handleFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !state.data.length,\n          className: \"btn btn-success\",\n          onClick: exportFile,\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(OutTable, {\n          data: state.data,\n          cols: state.cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\n\n_s(SheetJSApp, \"yua82o5JV2p+bdzgVd8naWBubMo=\");\n\n_c = SheetJSApp;\n\nconst DataInput = props => {\n  const handleChange = e => {\n    const files = e.target.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-inline\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: \"Spreadsheet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"form-control\",\n        id: \"file\",\n        accept: SheetJSFT,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\n\n_c2 = DataInput;\n\nconst OutTable = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-responsive\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: props.cols.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: c.name\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: props.data.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: props.cols.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: r[c.key]\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n/* list of supported file types */\n\n\n_c3 = OutTable;\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"].map(function (x) {\n  return \".\" + x;\n}).join(\",\");\n/* generate an array of column objects */\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SheetJSApp\");\n$RefreshReg$(_c2, \"DataInput\");\n$RefreshReg$(_c3, \"OutTable\");","map":{"version":3,"sources":["C:/Users/alex/Desktop/cod/excel-table-tool/src/SheetJSApp.js"],"names":["React","useState","DragDropFile","XLSX","SheetJSApp","state","setState","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","console","log","data","utils","sheet_to_json","header","cols","make_cols","readAsArrayBuffer","exportFile","aoa_to_sheet","book_new","book_append_sheet","writeFile","length","DataInput","props","handleChange","files","SheetJSFT","OutTable","map","c","name","key","r","i","x","join","refstr","o","C","decode_range","encode_col"],"mappings":"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","sourcesContent":["/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\nimport React, { useState } from \"react\";\nimport DragDropFile from \"./DragDropFile\";\nimport XLSX from \"xlsx\";\n\nconst SheetJSApp = () => {\n  const [state, setState] = useState([]);\n\n  const handleFile = (file /*:File*/) => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      setState({ data: data, cols: make_cols(ws[\"!ref\"]) });\n    };\n    if (rABS) reader.readAsBinaryString(file);\n    else reader.readAsArrayBuffer(file);\n  };\n\n  const exportFile = () => {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  };\n  return (\n    <DragDropFile handleFile={handleFile}>\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <DataInput handleFile={handleFile} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <button\n            disabled={!state.data.length}\n            className=\"btn btn-success\"\n            onClick={exportFile}\n          >\n            Export\n          </button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <OutTable data={state.data} cols={state.cols} />\n        </div>\n      </div>\n    </DragDropFile>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nconst DataInput = (props) => {\n  const handleChange = (e) => {\n    const files = e.target.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n  return (\n    <form className=\"form-inline\">\n      <div className=\"form-group\">\n        <label htmlFor=\"file\">Spreadsheet</label>\n        <input\n          type=\"file\"\n          className=\"form-control\"\n          id=\"file\"\n          accept={SheetJSFT}\n          onChange={handleChange}\n        />\n      </div>\n    </form>\n  );\n};\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nconst OutTable = (props) => {\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            {props.cols.map((c) => (\n              <th key={c.key}>{c.name}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {props.data.map((r, i) => (\n            <tr key={i}>\n              {props.cols.map((c) => (\n                <td key={c.key}>{r[c.key]}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n/* list of supported file types */\nconst SheetJSFT = [\n  \"xlsx\",\n  \"xlsb\",\n  \"xlsm\",\n  \"xls\",\n  \"xml\",\n  \"csv\",\n  \"txt\",\n  \"ods\",\n  \"fods\",\n  \"uos\",\n  \"sylk\",\n  \"dif\",\n  \"dbf\",\n  \"prn\",\n  \"qpw\",\n  \"123\",\n  \"wb*\",\n  \"wq*\",\n  \"html\",\n  \"htm\",\n]\n  .map(function (x) {\n    return \".\" + x;\n  })\n  .join(\",\");\n\n/* generate an array of column objects */\nconst make_cols = (refstr) => {\n  let o = [],\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\n  for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n  return o;\n};\n"]},"metadata":{},"sourceType":"module"}